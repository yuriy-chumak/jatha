; this macroses helps to notate defmacro body with ` and ,@

(defun combine-exprs (lft rgt expr)
  (if (and (constant? lft) (constant? rgt))
      (list 'quote expr)
  (if (null? rgt)
      (list 'list lft)
  (if (and (cons? rgt) (eql (car rgt) 'list))
      (cons 'list (cons lft (cdr rgt )))
  (list 'cons lft rgt ))))) 


(defun backquote:f (expr)
  (if (null? expr) nil 
    (if (atom? expr) (list 'quote expr)
       (if (eq (car expr) :COMMA) (car (cdr expr))  
         (if (and (cons? (car expr)) (eq (car (car expr)) :COMMA-ATSIGN )) 
            (list 'append (car (cdr (car expr))) (backquote:f (cdr expr))) 
         (combine-exprs (backquote:f (car expr)) 
            (backquote:f (cdr expr)) expr) )))))

; todo: hardcode "backquote" as builtin macro
(defmacro BACKQUOTE (expr)
   (backquote:f expr))

;(export 'BACKQUOTE)