;;; required common functions
;;; lisp

(defun f-cond (l)
  (if (null l) nil
    (let ((clause (car l))) 
      `(if ,(car clause) (progn ,@(cdr clause))
        ,(f-cond (cdr l))))))

(defmacro cond (&rest l) 
   (f-cond l))

;; ======================================================
;; solve
(defun is_in(el spis)
 (cond
   ((null spis) nil)
   ((eql el (car spis)) T)
   (t (is_in el (cdr spis)))
 )
)

(defun remove_first(el spis)
 (cond
   ((null spis) nil )
   ((eql el (car spis)) (cdr spis))
   (t (cons (car spis) ( remove_first el (cdr spis) ) ) )
 )
)

(defun group(spis)
 (cond
   ((null spis) nil )
   ((is_in (car spis) (cdr spis)) (cons (car spis) (group (cons (car spis) (remove_first (car spis) (cdr spis))))))
   (t (cons (car spis) (group (cdr spis))) )
 )
)

(progn (PRINT  (group '(1 2 1 3 2 5 4 7 4 1))) t)