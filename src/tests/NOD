;; --- Functions needed to implement macros -----

(defun f-cond (l)
  (if (null l) nil
    (let ((clause (car l))) 
      `(if ,(car clause) (progn ,@(cdr clause))
        ,(f-cond (cdr l))))))

(defmacro cond (&rest l) 
   (f-cond l))

;; NOD
(defun nod(a b)
  (cond
    ((= a b) a)
    ((< b a) (nod (- a b) b) )
    (t (nod a (- b a) ) )
  )
)

(= (nod 3 6) 3)
(= (nod 5 7) 1)
(= (nod 128 12) 4)
(= (nod 63 21) 21)
(= (nod 1234566 7776) 18)


; http://protsyk.com/cms/wp-content/uploads/2009/06/PRO38.png
(DEFUN POW(a i)
 (COND ((= a 0) 1)
       ((= i 1) a)
       (1 (* a (POW a (- i 1))) )
 )
)
 
(DEFUN SUM_i(a b i)
 (COND ((NULL a) 0)
       ((NULL b) 0)
       (1 (+ (/ (+ (POW (CAR a) i) (POW (CAR b) i)) (+ (CAR a) (CAR b))) (SUM_i (CDR a) (CDR b) (+ i 1) )) )
 )
)
 
(DEFUN SUM(a b)
  ( SUM_i a b 1)
)

(print (SUM '(1 2 5) '(3 4 6)))
(comment
(let ((f (SUM '(1 2 5) '(3 4 6))))
  (< 34 f 35)
)
)